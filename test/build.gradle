archivesBaseName = "tinycorelib_test"

minecraft {
    runs {
        client {
            workingDirectory project.file('run/client')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            jvmArgs '-ea'

            ideaModule rootProject.getName() + '.test.main'

            mods {
                tinycorelib {
                    source project(':core').sourceSets.main
                }

                tinycorelib_test {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            jvmArgs '-ea'

            ideaModule rootProject.getName() + '.test.main'

            mods {
                tinycorelib {
                    source project(':core').sourceSets.main
                }

                tinycorelib_test {
                    source sourceSets.main
                }
            }
        }

        data {
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            jvmArgs '-ea'

            ideaModule rootProject.getName() + '.test.test'

            mods {
                tinycorelib {
                    source project(':core').sourceSets.main
                }

                tinydatagen {
                    source project(':datagen').sourceSets.main
                }

                tinycorelib_test {
                    source sourceSets.main
                }

                tinydatagen_test {
                    source sourceSets.test
                }
            }

            workingDirectory project.file('run/data')
            args '--mod', 'tinydatagen_test', '--all', '--output', file('src/generated/resources/')
            args '--existing', file('src/test/resources/')
            args '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
    exclude '.cache/'
}

dependencies {
    compileOnly project(path: ':core', configuration: 'api')
    runtimeOnly project(path: ':core', configuration: 'dev')

    testCompileOnly project(path: ':core', configuration: 'api')
    testRuntimeOnly project(path: ':core', configuration: 'dev')
    testCompileOnly project(path: ':datagen', configuration: 'api')
    testRuntimeOnly project(path: ':datagen', configuration: 'dev')
}
